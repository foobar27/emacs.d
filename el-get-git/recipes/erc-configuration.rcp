(:name erc-configuration
       :description "Configuration for the IRC package ERC, supporting single-sign-on."
       :type builtin
       :depends (erc erc-extras single-sign-on)
       :before (progn
		 (defcustom freenode-nick-name nil
		   "Nick name on freenode.net."
		   :type '(string)
		   :group 'single-sign-on))
       :after (progn

		(defun nickserv-credentials (host nick-name)
		  (let* ((auth-source-creation-prompts
			  '((secret . "NickServ password for %u@%h: ")))
			 (found (nth 0 (auth-source-search :max 1
							   :host host
							   :user nick-name
							   :create t))))
		    (if found
			(let ((secret (plist-get found :secret)))
			  (if (functionp secret)
			      (funcall secret)
			    secret)
			  (plist-get found :save-function)))))

		(when freenode-nick-name
		  (require 'erc-services)
		  (erc-services-mode 1)
		  (setq erc-prompt-for-nickserv-password nil)
		  (setq erc-nickserv-passwords
			'((freenode (freenode-nick-name 
				     . 
				     (nickserv-credentials "chat.freenode.net" freenode-nick-name))))))

		;; use ido in erc (taken from http://www.emacswiki.org/emacs/InteractivelyDoThings)
		(defun rgr/ido-erc-buffer()
		  (interactive)
		  (switch-to-buffer
		   (ido-completing-read "Channel:" 
					(save-excursion
					  (delq
					   nil
					   (mapcar (lambda (buf)
						     (when (buffer-live-p buf)
						       (with-current-buffer buf
							 (and (eq major-mode 'erc-mode)
							      (buffer-name buf)))))
						   (buffer-list)))))))

		(global-set-key (kbd "C-c e") 'rgr/ido-erc-buffer)

		))
