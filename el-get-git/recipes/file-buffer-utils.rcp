(:name file-buffer-utils
       :type builtin
       :after (progn
		(defun delete-this-buffer-and-file ()
		  "Removes file connected to current buffer and kills buffer."
		  (interactive)
		  (let ((filename (buffer-file-name))
			(buffer (current-buffer))
			(name (buffer-name)))
		    (if (not (and filename (file-exists-p filename)))
			(error "Buffer '%s' is not visiting a file!" name)
		      (when (yes-or-no-p "Are you sure you want to remove this file? ")
			(delete-file filename)
			(kill-buffer buffer)
			(message "File '%s' successfully removed" filename)))))

		(defun rename-current-file-or-buffer ()
		  (interactive)
		  (if (not (buffer-file-name))
		      (call-interactively 'rename-buffer)
		    (let ((file (buffer-file-name)))
		      (with-temp-buffer
			(set-buffer (dired-noselect file))
			(dired-do-rename)
			(kill-buffer nil))))
		  nil)

		(global-set-key (kbd "C-c k") 'delete-this-buffer-and-file)
		(global-set-key (kbd "C-c R") 'rename-current-file-or-buffer)
		))
